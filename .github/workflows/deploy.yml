name: Deploy to Server

on:
  push:
    branches:
      - main  # Change to your default branch if needed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Notify Deployment Start
        uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-title: "üöÄ Deployment Started"
          embed-description: "Heads up: Deployment is now automated. No manual steps needed ‚Äî the system will handle it."
          embed-color: 16776960

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Step 3: Configure npm and git for timeouts
      - name: Configure npm and git timeouts
        run: |
          npm config set fetch-timeout 600000
          npm config set fetch-retry-mintimeout 10000
          npm config set fetch-retry-maxtimeout 60000
          npm config set fetch-retries 5
          git config --global http.postBuffer 1048576000
          git config --global http.maxRequestBuffer 100M
          git config --global core.compression 0

      # Step 4: Install dependencies with retry logic
      - name: Install Dependencies
        run: |
          for i in {1..3}; do
            echo "Install attempt $i..."
            if npm install --force --timeout=600000; then
              echo "npm install succeeded on attempt $i"
              break
            else
              echo "npm install failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "All npm install attempts failed"
                exit 1
              fi
              sleep 30
            fi
          done

      # Step 5: Build with timeout and retry
      - name: Build Project
        run: |
          timeout 15m npm run build || echo "Build failed or timed out, skipping."

      # Step 6: Deploy via SSH with enhanced timeout handling
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          timeout: 30m
          command_timeout: 25m
          script: |
            set -e
            echo "Starting deployment process..."
            
            # Configure git and npm timeouts on server
            git config --global http.postBuffer 1048576000
            git config --global http.maxRequestBuffer 100M
            git config --global core.compression 0
            npm config set fetch-timeout 600000
            npm config set fetch-retry-mintimeout 10000
            npm config set fetch-retry-maxtimeout 60000
            npm config set fetch-retries 5
            
            # Navigate to project directory
            cd eip-client/EIPsInsight
            echo "Current directory: $(pwd)"
            
            # Reset and pull with timeout
            echo "Resetting git state..."
            git reset --hard
            
            echo "Pulling latest changes..."
            timeout 5m git pull || {
              echo "Git pull timed out, trying with different approach..."
              git fetch --all
              git reset --hard origin/main
            }
            
            # Install dependencies with retry logic
            echo "Installing dependencies..."
            for i in {1..3}; do
              echo "Server install attempt $i..."
              if timeout 10m npm install --force; then
                echo "npm install succeeded on server attempt $i"
                break
              else
                echo "npm install failed on server attempt $i"
                if [ $i -eq 3 ]; then
                  echo "All server npm install attempts failed"
                  exit 1
                fi
                echo "Cleaning npm cache and retrying..."
                npm cache clean --force
                sleep 30
              fi
            done
            
            # Build with timeout
            echo "Building project..."
            timeout 15m npm run build || echo "Build failed or timed out, check manually"
            
            # Reload PM2
            echo "Reloading PM2 process..."
            pm2 reload 39 || echo "PM2 reload failed, check manually."
            
            echo "Deployment process completed."

      # Step 7: Notify Discord on success with embeds
      - name: Discord Notification - Success
        if: success()
        uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-title: "‚úÖ Deployment Successful"
          embed-description: |
            **Branch:** ${{ github.ref_name }}
            **Repository:** ${{ github.repository }}
            **Commit:** [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            üéâ Deployment completed without timeout issues!
          embed-color: 3066993
          embed-footer-text: "GitHub Actions ‚Ä¢ Deployment Bot"
          embed-timestamp: ${{ github.event.head_commit.timestamp }}

      # Step 8: Notify Discord on failure with embeds
      - name: Discord Notification - Failure
        if: failure()
        uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          embed-title: "‚ùå Deployment Failed"
          embed-description: |
            **Branch:** ${{ github.ref_name }}
            **Repository:** ${{ github.repository }}
            **Commit:** [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            ‚ö†Ô∏è Check GitHub Actions logs for timeout/connection details.
            üîß Enhanced timeout handling active - check server connectivity.
          embed-color: 15158332
          embed-footer-text: "GitHub Actions ‚Ä¢ Deployment Bot"
          embed-timestamp: ${{ github.event.head_commit.timestamp }}

